// Generated by purs bundle 0.13.3
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  function id(x) {
    return x;
  }

  exports.fromBoolean = id;
  exports.fromString = id;
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var caseJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  exports["caseJsonBoolean"] = caseJsonBoolean;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromString"] = $foreign.fromString;
  exports["fromObject"] = $foreign.fromObject;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];                           
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 165, column 46): " + [ v.constructor.name ]);
          });
      };
  };
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["bifunctorEither"] = bifunctorEither;
  exports["bindEither"] = bindEither;
  exports["showEither"] = showEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Either = $PS["Data.Either"];
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };                                                            
  var decodeJsonBoolean = new DecodeJson(Data_Argonaut_Core.caseJsonBoolean(new Data_Either.Left("Value is not a Boolean"))(Data_Either.Right.create));
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  exports["decodeJson"] = decodeJson;
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJsonBoolean"] = decodeJsonBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];      
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  exports["FunctorWithIndex"] = FunctorWithIndex;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];                                                       
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["for"] = $$for;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  exports["Tuple"] = Tuple;
  exports["uncurry"] = uncurry;
})(PS);
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  }; 
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      var $52 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function ($53) {
          return $52(Data_Function["const"]($53));
      };
  });
  exports["insert"] = insert;
  exports["foldableObject"] = foldableObject;
  exports["traversableObject"] = traversableObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var GEncodeJson = function (gEncodeJson) {
      this.gEncodeJson = gEncodeJson;
  };
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };
  var gEncodeJsonNil = new GEncodeJson(function (v) {
      return function (v1) {
          return Foreign_Object.empty;
      };
  });
  var gEncodeJson = function (dict) {
      return dict.gEncodeJson;
  };                                                
  var encodeRecord = function (dictGEncodeJson) {
      return function (dictRowToList) {
          return new EncodeJson(function (rec) {
              return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Data_RowList.RLProxy.value));
          });
      };
  };                                                                    
  var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Core.fromBoolean);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var gEncodeJsonCons = function (dictEncodeJson) {
      return function (dictGEncodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return new GEncodeJson(function (row) {
                      return function (v) {
                          return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Data_RowList.RLProxy.value));
                      };
                  });
              };
          };
      };
  };
  exports["encodeJson"] = encodeJson;
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJsonJBoolean"] = encodeJsonJBoolean;
  exports["encodeRecord"] = encodeRecord;
  exports["gEncodeJsonNil"] = gEncodeJsonNil;
  exports["gEncodeJsonCons"] = gEncodeJsonCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Screeps.FFI

  exports.unsafeField = function(key){
    return function(obj){
      return obj[key];
    }
  }

  exports.unsafeGetFieldEff = function(key){
    return function(obj){
      return function(){
        return obj[key];
      }
    }
  }

  exports.unsafeSetFieldEff = function(key){
    return function(obj){
      return function(val){
        return function(){
          obj[key] = val;
        }
      }
    }
  }

  exports.runThisEffFn1 = function(key){
    return function(self){
      return function(a){
        return function(){
          return self[key](a);
        }
      }
    }
  }

  exports.runThisEffFn2 = function(key){
    return function(self){
      return function(a){
        return function(b){
          return function(){
            return self[key](a, b);
          }
        }
      }
    }
  }

  exports.runThisFn1 = function(key){
    return function(self){
      return function(a){
        return self[key](a);
      }
    }
  }

  exports.runThisFn2 = function(key){
    return function(self){
      return function(a){
        return function(b){
          return self[key](a, b);
        }
      }
    }
  }

  exports.null = null;          

  exports.notNullOrUndefined = function(x){
      return x;
  }

  exports.toMaybeImpl = function(val, nothing, just){
      if(val === null || val === undefined){
          return nothing;
      } else {
          return just(val);
      }
  }
})(PS["Screeps.FFI"] = PS["Screeps.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.FFI"] = $PS["Screeps.FFI"] || {};
  var exports = $PS["Screeps.FFI"];
  var $foreign = $PS["Screeps.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                                                      
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNullOrUndefined);
  var toMaybe = function (n) {
      return $foreign.toMaybeImpl(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["unsafeField"] = $foreign.unsafeField;
  exports["unsafeGetFieldEff"] = $foreign.unsafeGetFieldEff;
  exports["unsafeSetFieldEff"] = $foreign.unsafeSetFieldEff;
  exports["runThisEffFn1"] = $foreign.runThisEffFn1;
  exports["runThisEffFn2"] = $foreign.runThisEffFn2;
  exports["runThisFn1"] = $foreign.runThisFn1;
  exports["runThisFn2"] = $foreign.runThisFn2;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Memory"] = $PS["Screeps.Memory"] || {};
  var exports = $PS["Screeps.Memory"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var toJson = function (dictEncodeJson) {
      return Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson);
  };
  var fromJson = function (dictDecodeJson) {
      return function (jsonStr) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(jsonStr))(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
      };
  };
  exports["fromJson"] = fromJson;
  exports["toJson"] = toJson;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["from"] = from;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Generic.Rep.Eq"] = $PS["Data.Generic.Rep.Eq"] || {};
  var exports = $PS["Data.Generic.Rep.Eq"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];                
  var GenericEq = function (genericEq$prime) {
      this["genericEq'"] = genericEq$prime;
  }; 
  var genericEqArgument = function (dictEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var genericEq$prime = function (dict) {
      return dict["genericEq'"];
  };
  var genericEqConstructor = function (dictGenericEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return genericEq$prime(dictGenericEq)(v)(v1);
          };
      });
  };
  var genericEq = function (dictGeneric) {
      return function (dictGenericEq) {
          return function (x) {
              return function (y) {
                  return genericEq$prime(dictGenericEq)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["genericEq"] = genericEq;
  exports["genericEqConstructor"] = genericEqConstructor;
  exports["genericEqArgument"] = genericEqArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Types"] = $PS["Screeps.Types"] || {};
  var exports = $PS["Screeps.Types"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = $PS["Data.Generic.Rep.Eq"];
  var Data_Show = $PS["Data.Show"];
  var TargetPt = (function () {
      function TargetPt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TargetPt.create = function (value0) {
          return function (value1) {
              return new TargetPt(value0, value1);
          };
      };
      return TargetPt;
  })();
  var TargetObj = (function () {
      function TargetObj(value0) {
          this.value0 = value0;
      };
      TargetObj.create = function (value0) {
          return new TargetObj(value0);
      };
      return TargetObj;
  })();
  var TargetPos = (function () {
      function TargetPos(value0) {
          this.value0 = value0;
      };
      TargetPos.create = function (value0) {
          return new TargetPos(value0);
      };
      return TargetPos;
  })();
  var OfType = (function () {
      function OfType(value0) {
          this.value0 = value0;
      };
      OfType.create = function (value0) {
          return new OfType(value0);
      };
      return OfType;
  })();
  var OfObj = (function () {
      function OfObj(value0) {
          this.value0 = value0;
      };
      OfObj.create = function (value0) {
          return new OfObj(value0);
      };
      return OfObj;
  })();
  var OfPos = (function () {
      function OfPos(value0) {
          this.value0 = value0;
      };
      OfPos.create = function (value0) {
          return new OfPos(value0);
      };
      return OfPos;
  })();
  var showReturnCode = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showInt)(v);
  });
  var showResourceType = new Data_Show.Show(function (v) {
      return v;
  });
  var genericStructureType = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });   
  var genericReturnCode = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });                                                                                                                                                                              
  var eqStructureType = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericStructureType)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqArgument(Data_Eq.eqString))));
  var eqReturnCode = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericReturnCode)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqArgument(Data_Eq.eqInt))));
  exports["TargetPt"] = TargetPt;
  exports["TargetObj"] = TargetObj;
  exports["TargetPos"] = TargetPos;
  exports["OfType"] = OfType;
  exports["OfObj"] = OfObj;
  exports["OfPos"] = OfPos;
  exports["eqReturnCode"] = eqReturnCode;
  exports["showReturnCode"] = showReturnCode;
  exports["showResourceType"] = showResourceType;
  exports["eqStructureType"] = eqStructureType;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Creep"] = $PS["Screeps.Creep"] || {};
  var exports = $PS["Screeps.Creep"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var Screeps_Memory = $PS["Screeps.Memory"];
  var Screeps_Types = $PS["Screeps.Types"];            
  var upgradeController = Screeps_FFI.runThisEffFn1("upgradeController");
  var transferToStructure = Screeps_FFI.runThisEffFn2("transfer");
  var setMemory = function (dictEncodeJson) {
      return function (creep) {
          return function (key) {
              return function (val) {
                  var creepMemory = Screeps_FFI.unsafeField("memory")(creep);
                  return Screeps_FFI.unsafeSetFieldEff(key)(creepMemory)(Screeps_Memory.toJson(dictEncodeJson)(val));
              };
          };
      };
  };
  var say = function (creep) {
      return function (msg) {
          return Screeps_FFI.runThisEffFn1("say")(creep)(msg);
      };
  };                                                                       
  var name = Screeps_FFI.unsafeField("name");
  var moveTo = function (creep) {
      return function (v) {
          if (v instanceof Screeps_Types.TargetPt) {
              return Screeps_FFI.runThisEffFn2("moveTo")(creep)(v.value0)(v.value1);
          };
          if (v instanceof Screeps_Types.TargetPos) {
              return Screeps_FFI.runThisEffFn1("moveTo")(creep)(v.value0);
          };
          if (v instanceof Screeps_Types.TargetObj) {
              return Screeps_FFI.runThisEffFn1("moveTo")(creep)(v.value0);
          };
          throw new Error("Failed pattern match at Screeps.Creep (line 143, column 1 - line 143, column 67): " + [ creep.constructor.name, v.constructor.name ]);
      };
  };                                           
  var harvestSource = Screeps_FFI.runThisEffFn1("harvest"); 
  var getMemory = function (dictDecodeJson) {
      return function (creep) {
          return function (key) {
              var creepMemory = Screeps_FFI.unsafeField("memory")(creep);
              return Data_Functor.map(Effect.functorEffect)(Screeps_Memory.fromJson(dictDecodeJson))(Screeps_FFI.unsafeGetFieldEff(key)(creepMemory));
          };
      };
  };                                                                 
  var carryCapacity = Screeps_FFI.unsafeField("carryCapacity");
  var carry = Screeps_FFI.unsafeField("carry");              
  var build = Screeps_FFI.runThisEffFn1("build");                      
  var amtCarrying = function (creep) {
      return function (res) {
          return Screeps_FFI.unsafeField(Data_Show.show(Screeps_Types.showResourceType)(res))(carry(creep));
      };
  };
  exports["amtCarrying"] = amtCarrying;
  exports["carryCapacity"] = carryCapacity;
  exports["build"] = build;
  exports["harvestSource"] = harvestSource;
  exports["getMemory"] = getMemory;
  exports["setMemory"] = setMemory;
  exports["moveTo"] = moveTo;
  exports["say"] = say;
  exports["transferToStructure"] = transferToStructure;
  exports["upgradeController"] = upgradeController;
})(PS);
(function(exports) {
  "use strict";

  exports.createCreepPrimeImpl = function(structure){
      return function(parts){
          return function(name){
              return function(memory){
                  return function(left){
                      return function(right){
                          return function(){
                              var result = structure.createCreep(parts, name, memory);
                              if(typeof result === "string"){
                                  return right(result);
                              } else {
                                  return left(result);
                              }
                          }
                      }
                  }
              }
          }
      }
  }
})(PS["Screeps.Spawn"] = PS["Screeps.Spawn"] || {});
(function(exports) {
  "use strict";               
  exports.err_not_in_range = ERR_NOT_IN_RANGE;
  exports.find_hostile_creeps = FIND_HOSTILE_CREEPS;
  exports.find_sources = FIND_SOURCES;      
  exports.find_my_structures = FIND_MY_STRUCTURES;
  exports.find_construction_sites = FIND_CONSTRUCTION_SITES;

  exports.part_move = MOVE;
  exports.part_work = WORK;
  exports.part_carry = CARRY;         

  exports.structure_spawn = STRUCTURE_SPAWN;
  exports.structure_extension = STRUCTURE_EXTENSION;
  exports.structure_tower = STRUCTURE_TOWER;

  exports.resource_energy = RESOURCE_ENERGY;
})(PS["Screeps.Constants"] = PS["Screeps.Constants"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Constants"] = $PS["Screeps.Constants"] || {};
  var exports = $PS["Screeps.Constants"];
  var $foreign = $PS["Screeps.Constants"];
  exports["err_not_in_range"] = $foreign.err_not_in_range;
  exports["find_hostile_creeps"] = $foreign.find_hostile_creeps;
  exports["find_sources"] = $foreign.find_sources;
  exports["find_my_structures"] = $foreign.find_my_structures;
  exports["find_construction_sites"] = $foreign.find_construction_sites;
  exports["part_move"] = $foreign.part_move;
  exports["part_work"] = $foreign.part_work;
  exports["part_carry"] = $foreign.part_carry;
  exports["structure_spawn"] = $foreign.structure_spawn;
  exports["structure_extension"] = $foreign.structure_extension;
  exports["structure_tower"] = $foreign.structure_tower;
  exports["resource_energy"] = $foreign.resource_energy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Structure"] = $PS["Screeps.Structure"] || {};
  var exports = $PS["Screeps.Structure"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var structureType = Screeps_FFI.unsafeField("structureType");
  var unsafeCast = function (t) {
      return function (struc) {
          if (Data_Eq.eq(Screeps_Types.eqStructureType)(structureType(struc))(t)) {
              return Data_Maybe.Just.create(struc);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Screeps.Structure (line 33, column 1 - line 33, column 66): " + [ t.constructor.name, struc.constructor.name ]);
      };
  };
  exports["unsafeCast"] = unsafeCast;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Spawn"] = $PS["Screeps.Spawn"] || {};
  var exports = $PS["Screeps.Spawn"];
  var $foreign = $PS["Screeps.Spawn"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Either = $PS["Data.Either"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var Screeps_Structure = $PS["Screeps.Structure"];                
  var toSpawn = Screeps_Structure.unsafeCast(Screeps_Constants.structure_spawn);
  var energyCapacity = Screeps_FFI.unsafeField("energyCapacity");
  var energy = Screeps_FFI.unsafeField("energy");
  var createCreep$prime = function (dictEncodeJson) {
      return function (spawn) {
          return function (parts) {
              return function (name$prime) {
                  return function (mem) {
                      return $foreign.createCreepPrimeImpl(spawn)(parts)(Screeps_FFI.toNullable(name$prime))(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(mem))(Data_Either.Left.create)(Data_Either.Right.create);
                  };
              };
          };
      };
  };
  exports["energy"] = energy;
  exports["energyCapacity"] = energyCapacity;
  exports["createCreep'"] = createCreep$prime;
  exports["toSpawn"] = toSpawn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["CreepRoles"] = $PS["CreepRoles"] || {};
  var exports = $PS["CreepRoles"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Spawn = $PS["Screeps.Spawn"];                
  var UnknownCreepType = function (x) {
      return x;
  };
  var HarvesterRole = (function () {
      function HarvesterRole() {

      };
      HarvesterRole.value = new HarvesterRole();
      return HarvesterRole;
  })();
  var BuilderRole = (function () {
      function BuilderRole() {

      };
      BuilderRole.value = new BuilderRole();
      return BuilderRole;
  })();
  var UpgraderRole = (function () {
      function UpgraderRole() {

      };
      UpgraderRole.value = new UpgraderRole();
      return UpgraderRole;
  })();
  var HarvesterMemory = (function () {
      function HarvesterMemory(value0) {
          this.value0 = value0;
      };
      HarvesterMemory.create = function (value0) {
          return new HarvesterMemory(value0);
      };
      return HarvesterMemory;
  })();
  var BuilderMemory = (function () {
      function BuilderMemory(value0) {
          this.value0 = value0;
      };
      BuilderMemory.create = function (value0) {
          return new BuilderMemory(value0);
      };
      return BuilderMemory;
  })();
  var UpgraderMemory = (function () {
      function UpgraderMemory(value0) {
          this.value0 = value0;
      };
      UpgraderMemory.create = function (value0) {
          return new UpgraderMemory(value0);
      };
      return UpgraderMemory;
  })();
  var Harvester = (function () {
      function Harvester(value0) {
          this.value0 = value0;
      };
      Harvester.create = function (value0) {
          return new Harvester(value0);
      };
      return Harvester;
  })();
  var Builder = (function () {
      function Builder(value0) {
          this.value0 = value0;
      };
      Builder.create = function (value0) {
          return new Builder(value0);
      };
      return Builder;
  })();
  var Upgrader = (function () {
      function Upgrader(value0) {
          this.value0 = value0;
      };
      Upgrader.create = function (value0) {
          return new Upgrader(value0);
      };
      return Upgrader;
  })();
  var encodeRole = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof HarvesterRole) {
          return Data_Argonaut_Core.fromString("\"Harvester\"");
      };
      if (v instanceof BuilderRole) {
          return Data_Argonaut_Core.fromString("\"Builder\"");
      };
      if (v instanceof UpgraderRole) {
          return Data_Argonaut_Core.fromString("\"Upgrader\"");
      };
      throw new Error("Failed pattern match at CreepRoles (line 33, column 1 - line 36, column 59): " + [ v.constructor.name ]);
  });
  var encodeCreepMemory = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
      if (v instanceof HarvesterMemory) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeRole)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
              return "role";
          }))())())(v.value0);
      };
      if (v instanceof BuilderMemory) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeRole)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
              return "working";
          }))())(new Data_Symbol.IsSymbol(function () {
              return "role";
          }))())())(v.value0);
      };
      if (v instanceof UpgraderMemory) {
          return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeRole)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
              return "working";
          }))())(new Data_Symbol.IsSymbol(function () {
              return "role";
          }))())())(v.value0);
      };
      throw new Error("Failed pattern match at CreepRoles (line 54, column 1 - line 57, column 51): " + [ v.constructor.name ]);
  });
  var spawnCreep = function (spawn) {
      return function (bodyParts) {
          return function (name) {
              return function (mem) {
                  return Screeps_Spawn["createCreep'"](encodeCreepMemory)(spawn)(bodyParts)(name)(mem);
              };
          };
      };
  };
  var decodeRole = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
      var v = function (v1) {
          var v2 = function (v3) {
              var v4 = function (v5) {
                  if (Data_Boolean.otherwise) {
                      return Data_Either.Left.create("unable to parse json as role:\x0a" + Data_Argonaut_Core.stringify(json));
                  };
                  throw new Error("Failed pattern match at CreepRoles (line 38, column 1 - line 43, column 82): " + [ json.constructor.name ]);
              };
              var $24 = Data_Argonaut_Core.stringify(json);
              if ($24 === "\"Upgrader\"") {
                  return new Data_Either.Right(UpgraderRole.value);
              };
              return v4(true);
          };
          var $26 = Data_Argonaut_Core.stringify(json);
          if ($26 === "\"Builder\"") {
              return new Data_Either.Right(BuilderRole.value);
          };
          return v2(true);
      };
      var $28 = Data_Argonaut_Core.stringify(json);
      if ($28 === "\"Harvester\"") {
          return new Data_Either.Right(HarvesterRole.value);
      };
      return v(true);
  });
  var classifyCreep = function (creep) {
      return function __do() {
          var v = Screeps_Creep.getMemory(decodeRole)(creep)("role")();
          if (v instanceof Data_Either.Right && v.value0 instanceof HarvesterRole) {
              return Data_Either.Right.create(new Harvester({
                  creep: creep,
                  mem: {
                      role: HarvesterRole.value
                  }
              }));
          };
          if (v instanceof Data_Either.Right && v.value0 instanceof BuilderRole) {
              var v1 = Screeps_Creep.getMemory(Data_Argonaut_Decode_Class.decodeJsonBoolean)(creep)("working")();
              return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(UnknownCreepType)(function (working) {
                  return new Builder({
                      creep: creep,
                      mem: {
                          role: BuilderRole.value,
                          working: working
                      }
                  });
              })(v1);
          };
          if (v instanceof Data_Either.Right && v.value0 instanceof UpgraderRole) {
              var v1 = Screeps_Creep.getMemory(Data_Argonaut_Decode_Class.decodeJsonBoolean)(creep)("working")();
              return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(UnknownCreepType)(function (working) {
                  return new Upgrader({
                      creep: creep,
                      mem: {
                          role: UpgraderRole.value,
                          working: working
                      }
                  });
              })(v1);
          };
          if (v instanceof Data_Either.Left) {
              return Data_Either.Left.create(v.value0);
          };
          throw new Error("Failed pattern match at CreepRoles (line 70, column 3 - line 82, column 51): " + [ v.constructor.name ]);
      };
  };
  exports["HarvesterRole"] = HarvesterRole;
  exports["BuilderRole"] = BuilderRole;
  exports["UpgraderRole"] = UpgraderRole;
  exports["HarvesterMemory"] = HarvesterMemory;
  exports["BuilderMemory"] = BuilderMemory;
  exports["UpgraderMemory"] = UpgraderMemory;
  exports["Harvester"] = Harvester;
  exports["Builder"] = Builder;
  exports["Upgrader"] = Upgrader;
  exports["classifyCreep"] = classifyCreep;
  exports["spawnCreep"] = spawnCreep;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $123 = Data_Maybe.maybe([  ])(singleton);
          return function ($124) {
              return $123(f($124));
          };
      })());
  };
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["mapMaybe"] = mapMaybe;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  var Data_Show = $PS["Data.Show"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var logShow = function (dictMonadEffect) {
      return function (dictShow) {
          var $23 = Effect_Class.liftEffect(dictMonadEffect);
          var $24 = Effect_Console.logShow(dictShow);
          return function ($25) {
              return $23($24($25));
          };
      };
  };
  exports["logShow"] = logShow;
})(PS);
(function(exports) {
  "use strict";

  exports.getGameGlobal = function(){ return Game; }
})(PS["Screeps.Game"] = PS["Screeps.Game"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Game"] = $PS["Screeps.Game"] || {};
  var exports = $PS["Screeps.Game"];
  var $foreign = $PS["Screeps.Game"];
  var Screeps_FFI = $PS["Screeps.FFI"];                  
  var spawns = Screeps_FFI.unsafeField("spawns");
  var creeps = Screeps_FFI.unsafeField("creeps");
  exports["creeps"] = creeps;
  exports["spawns"] = spawns;
  exports["getGameGlobal"] = $foreign.getGameGlobal;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Room"] = $PS["Screeps.Room"] || {};
  var exports = $PS["Screeps.Room"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var find$prime = function (room) {
      return function (findType) {
          return function (filter) {
              return Screeps_FFI.runThisFn2("find")(room)(findType)({
                  filter: filter
              });
          };
      };
  };
  var find = Screeps_FFI.runThisFn1("find");
  var energyCapacityAvailable = Screeps_FFI.unsafeField("energyCapacityAvailable");
  var energyAvailable = Screeps_FFI.unsafeField("energyAvailable");
  var controller = function (room) {
      return Screeps_FFI.toMaybe(Screeps_FFI.unsafeField("controller")(room));
  };
  exports["controller"] = controller;
  exports["energyAvailable"] = energyAvailable;
  exports["energyCapacityAvailable"] = energyCapacityAvailable;
  exports["find"] = find;
  exports["find'"] = find$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.RoomObject"] = $PS["Screeps.RoomObject"] || {};
  var exports = $PS["Screeps.RoomObject"];
  var Screeps_FFI = $PS["Screeps.FFI"];                
  var room = Screeps_FFI.unsafeField("room");
  var pos = Screeps_FFI.unsafeField("pos");
  exports["room"] = room;
  exports["pos"] = pos;
})(PS);
(function($PS) {
  "use strict";
  $PS["CreepSpawning"] = $PS["CreepSpawning"] || {};
  var exports = $PS["CreepSpawning"];
  var Control_Bind = $PS["Control.Bind"];
  var CreepRoles = $PS["CreepRoles"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Console = $PS["Effect.Console"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Game = $PS["Screeps.Game"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var createBalancedCreep = function (spawn) {
      return function (energy) {
          return function (mem) {
              var numberOfParts = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(energy)(200);
              var workParts = Data_Functor.map(Data_Functor.functorArray)(function (n) {
                  return Screeps_Constants.part_carry;
              })(Data_Array.range(0)(numberOfParts - 1 | 0));
              var moveParts = Data_Functor.map(Data_Functor.functorArray)(function (n) {
                  return Screeps_Constants.part_move;
              })(Data_Array.range(0)(numberOfParts - 1 | 0));
              var carryParts = Data_Functor.map(Data_Functor.functorArray)(function (n) {
                  return Screeps_Constants.part_work;
              })(Data_Array.range(0)(numberOfParts - 1 | 0));
              var allParts = Data_Array.concat([ moveParts, workParts, carryParts ]);
              return function __do() {
                  Effect_Console.log(Data_Show.show(Data_Show.showInt)(numberOfParts))();
                  Effect_Console.log(Data_Show.show(Data_Show.showInt)(Data_Array.length(moveParts)))();
                  Effect_Console.log(Data_Show.show(Data_Show.showInt)(energy))();
                  Effect_Console.log(Data_Show.show(Data_Show.showInt)(Data_Array.length(allParts)))();
                  return CreepRoles.spawnCreep(spawn)(allParts)(Data_Maybe.Nothing.value)(mem)();
              };
          };
      };
  };
  var spawnCreepIfNeeded = function (spawn) {
      return function __do() {
          var v = Screeps_Game.getGameGlobal();
          var v1 = Data_Traversable["for"](Effect.applicativeEffect)(Foreign_Object.traversableObject)(Screeps_Game.creeps(v))(CreepRoles.classifyCreep)();
          var maxEnergy = Screeps_Room.energyCapacityAvailable(Screeps_RoomObject.room(spawn));
          var creepsAndRoles = Data_Array.fromFoldable(Foreign_Object.foldableObject)(v1);
          var harvesters = Data_Array.mapMaybe(function (v2) {
              if (v2 instanceof Data_Either.Right && v2.value0 instanceof CreepRoles.Harvester) {
                  return new Data_Maybe.Just(v2.value0.value0);
              };
              return Data_Maybe.Nothing.value;
          })(creepsAndRoles);
          var upgraders = Data_Array.mapMaybe(function (v2) {
              if (v2 instanceof Data_Either.Right && v2.value0 instanceof CreepRoles.Upgrader) {
                  return new Data_Maybe.Just(v2.value0.value0);
              };
              return Data_Maybe.Nothing.value;
          })(creepsAndRoles);
          var builders = Data_Array.mapMaybe(function (v2) {
              if (v2 instanceof Data_Either.Right && v2.value0 instanceof CreepRoles.Builder) {
                  return new Data_Maybe.Just(v2.value0.value0);
              };
              return Data_Maybe.Nothing.value;
          })(creepsAndRoles);
          var $16 = Data_Array.length(harvesters) < 2 && maxEnergy >= Screeps_Room.energyAvailable(Screeps_RoomObject.room(spawn));
          if ($16) {
              return Control_Bind.bind(Effect.bindEffect)(createBalancedCreep(spawn)(maxEnergy)(new CreepRoles.HarvesterMemory({
                  role: CreepRoles.HarvesterRole.value
              })))(Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Either.showEither(Screeps_Types.showReturnCode)(Data_Show.showString)))();
          };
          var $17 = Data_Array.length(builders) < 3 && maxEnergy >= Screeps_Room.energyAvailable(Screeps_RoomObject.room(spawn));
          if ($17) {
              return Control_Bind.bind(Effect.bindEffect)(createBalancedCreep(spawn)(maxEnergy)(new CreepRoles.BuilderMemory({
                  role: CreepRoles.BuilderRole.value,
                  working: true
              })))(Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Either.showEither(Screeps_Types.showReturnCode)(Data_Show.showString)))();
          };
          var $18 = Data_Array.length(upgraders) < 1 && maxEnergy >= Screeps_Room.energyAvailable(Screeps_RoomObject.room(spawn));
          if ($18) {
              return Control_Bind.bind(Effect.bindEffect)(createBalancedCreep(spawn)(maxEnergy)(new CreepRoles.UpgraderMemory({
                  role: CreepRoles.UpgraderRole.value,
                  working: true
              })))(Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Either.showEither(Screeps_Types.showReturnCode)(Data_Show.showString)))();
          };
          return Data_Unit.unit;
      };
  };
  exports["spawnCreepIfNeeded"] = spawnCreepIfNeeded;
})(PS);
(function(exports) {
  "use strict";

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Role.Builder"] = $PS["Role.Builder"] || {};
  var exports = $PS["Role.Builder"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var ignore = function (v) {
      return Data_Unit.unit;
  };
  var ignoreM = function (dictMonad) {
      return function (m) {
          return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(m)(ignore);
      };
  };
  var runBuilder = function (v) {
      if (v.mem.working) {
          var v1 = Screeps_Creep.amtCarrying(v.creep)(Screeps_Constants.resource_energy) === 0;
          if (v1) {
              return function __do() {
                  var v2 = Screeps_Creep.say(v.creep)("Harvesting")();
                  return Screeps_Creep.setMemory(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.creep)("working")(false)();
              };
          };
          if (!v1) {
              var v2 = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(v.creep))(Screeps_Constants.find_construction_sites));
              if (v2 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v3 = Screeps_Creep.build(v.creep)(v2.value0)();
                      var $17 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v3)(Screeps_Constants.err_not_in_range);
                      if ($17) {
                          return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(v.creep)(new Screeps_Types.TargetObj(v2.value0)))();
                      };
                      return Data_Unit.unit;
                  };
              };
              throw new Error("Failed pattern match at Role.Builder (line 32, column 9 - line 39, column 27): " + [ v2.constructor.name ]);
          };
          throw new Error("Failed pattern match at Role.Builder (line 26, column 5 - line 39, column 27): " + [ v1.constructor.name ]);
      };
      var v1 = Screeps_Creep.amtCarrying(v.creep)(Screeps_Constants.resource_energy) === Screeps_Creep.carryCapacity(v.creep);
      if (v1) {
          return function __do() {
              var v2 = Screeps_Creep.say(v.creep)("working")();
              return Screeps_Creep.setMemory(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.creep)("working")(true)();
          };
      };
      if (!v1) {
          var v2 = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(v.creep))(Screeps_Constants.find_sources));
          if (v2 instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (v2 instanceof Data_Maybe.Just) {
              return function __do() {
                  var v3 = Screeps_Creep.harvestSource(v.creep)(v2.value0)();
                  var $23 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v3)(Screeps_Constants.err_not_in_range);
                  if ($23) {
                      return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(v.creep)(new Screeps_Types.TargetObj(v2.value0)))();
                  };
                  return Data_Unit.unit;
              };
          };
          throw new Error("Failed pattern match at Role.Builder (line 46, column 9 - line 53, column 27): " + [ v2.constructor.name ]);
      };
      throw new Error("Failed pattern match at Role.Builder (line 41, column 5 - line 53, column 27): " + [ v1.constructor.name ]);
  };
  exports["runBuilder"] = runBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Extension"] = $PS["Screeps.Extension"] || {};
  var exports = $PS["Screeps.Extension"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var Screeps_Structure = $PS["Screeps.Structure"];                
  var toExtension = Screeps_Structure.unsafeCast(Screeps_Constants.structure_extension);
  var energyCapacity = Screeps_FFI.unsafeField("energyCapacity");
  var energy = Screeps_FFI.unsafeField("energy");
  exports["energy"] = energy;
  exports["energyCapacity"] = energyCapacity;
  exports["toExtension"] = toExtension;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Tower"] = $PS["Screeps.Tower"] || {};
  var exports = $PS["Screeps.Tower"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var Screeps_Structure = $PS["Screeps.Structure"];                
  var toTower = Screeps_Structure.unsafeCast(Screeps_Constants.structure_tower);
  var energyCapacity = Screeps_FFI.unsafeField("energyCapacity");
  var energy = Screeps_FFI.unsafeField("energy");
  var attack = Screeps_FFI.runThisEffFn1("attack");
  exports["energy"] = energy;
  exports["energyCapacity"] = energyCapacity;
  exports["attack"] = attack;
  exports["toTower"] = toTower;
})(PS);
(function($PS) {
  "use strict";
  $PS["Role.Harvester"] = $PS["Role.Harvester"] || {};
  var exports = $PS["Role.Harvester"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Extension = $PS["Screeps.Extension"];
  var Screeps_Game = $PS["Screeps.Game"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Spawn = $PS["Screeps.Spawn"];
  var Screeps_Tower = $PS["Screeps.Tower"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var ignore = function (v) {
      return Data_Unit.unit;
  };
  var ignoreM = function (dictMonad) {
      return function (m) {
          return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(m)(ignore);
      };
  };
  var desiredTarget = function (struct) {
      var v = Screeps_Tower.toTower(struct);
      if (v instanceof Data_Maybe.Just) {
          return Screeps_Tower.energy(v.value0) < Screeps_Tower.energyCapacity(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          var v1 = Screeps_Spawn.toSpawn(struct);
          if (v1 instanceof Data_Maybe.Just) {
              return Screeps_Spawn.energy(v1.value0) < Screeps_Spawn.energyCapacity(v1.value0);
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              var v2 = Screeps_Extension.toExtension(struct);
              if (v2 instanceof Data_Maybe.Just) {
                  return Screeps_Extension.energy(v2.value0) < Screeps_Extension.energyCapacity(v2.value0);
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return false;
              };
              throw new Error("Failed pattern match at Role.Harvester (line 36, column 11 - line 39, column 29): " + [ v2.constructor.name ]);
          };
          throw new Error("Failed pattern match at Role.Harvester (line 32, column 7 - line 39, column 29): " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Role.Harvester (line 28, column 3 - line 39, column 29): " + [ v.constructor.name ]);
  };
  var runHarvester = function (v) {
      var $18 = Screeps_Creep.amtCarrying(v.creep)(Screeps_Constants.resource_energy) < Screeps_Creep.carryCapacity(v.creep);
      if ($18) {
          var v1 = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(v.creep))(Screeps_Constants.find_sources));
          if (v1 instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return function __do() {
                  var v2 = Screeps_Creep.harvestSource(v.creep)(v1.value0)();
                  var $21 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v2)(Screeps_Constants.err_not_in_range);
                  if ($21) {
                      return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(v.creep)(new Screeps_Types.TargetObj(v1.value0)))();
                  };
                  return Data_Unit.unit;
              };
          };
          throw new Error("Failed pattern match at Role.Harvester (line 46, column 5 - line 52, column 23): " + [ v1.constructor.name ]);
      };
      return function __do() {
          var v1 = Screeps_Game.getGameGlobal();
          var v2 = Data_Array.head(Data_Array.filter(desiredTarget)(Screeps_Room.find(Screeps_RoomObject.room(v.creep))(Screeps_Constants.find_my_structures)));
          if (v2 instanceof Data_Maybe.Nothing) {
              return Data_Unit.unit;
          };
          if (v2 instanceof Data_Maybe.Just) {
              var v3 = Screeps_Creep.transferToStructure(v.creep)(v2.value0)(Screeps_Constants.resource_energy)();
              var $26 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v3)(Screeps_Constants.err_not_in_range);
              if ($26) {
                  return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(v.creep)(new Screeps_Types.TargetObj(v2.value0)))();
              };
              return Data_Unit.unit;
          };
          throw new Error("Failed pattern match at Role.Harvester (line 56, column 5 - line 62, column 23): " + [ v2.constructor.name ]);
      };
  };
  exports["runHarvester"] = runHarvester;
})(PS);
(function($PS) {
  "use strict";
  $PS["Role.Upgrader"] = $PS["Role.Upgrader"] || {};
  var exports = $PS["Role.Upgrader"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Game = $PS["Screeps.Game"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Types = $PS["Screeps.Types"];
  var ignore = function (v) {
      return Data_Unit.unit;
  };
  var ignoreM = function (dictMonad) {
      return function (m) {
          return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(m)(ignore);
      };
  };
  var runUpgrader = function (v) {
      if (!v.mem.working) {
          var $13 = Screeps_Creep.amtCarrying(v.creep)(Screeps_Constants.resource_energy) < Screeps_Creep.carryCapacity(v.creep);
          if ($13) {
              var v1 = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(v.creep))(Screeps_Constants.find_sources));
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v2 = Screeps_Creep.harvestSource(v.creep)(v1.value0)();
                      var $16 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v2)(Screeps_Constants.err_not_in_range);
                      if ($16) {
                          return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(v.creep)(new Screeps_Types.TargetObj(v1.value0)))();
                      };
                      return Data_Unit.unit;
                  };
              };
              throw new Error("Failed pattern match at Role.Upgrader (line 36, column 9 - line 43, column 27): " + [ v1.constructor.name ]);
          };
          return Screeps_Creep.setMemory(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.creep)("working")(true);
      };
      if (v.mem.working) {
          return function __do() {
              var v1 = Screeps_Game.getGameGlobal();
              var $19 = Screeps_Creep.amtCarrying(v.creep)("energy") > 0;
              if ($19) {
                  var v2 = Screeps_Room.controller(Screeps_RoomObject.room(v.creep));
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return Data_Unit.unit;
                  };
                  if (v2 instanceof Data_Maybe.Just) {
                      var v3 = Screeps_Creep.upgradeController(v.creep)(v2.value0)();
                      var $22 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v3)(Screeps_Constants.err_not_in_range);
                      if ($22) {
                          return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(v.creep)(new Screeps_Types.TargetObj(v2.value0)))();
                      };
                      return Data_Unit.unit;
                  };
                  throw new Error("Failed pattern match at Role.Upgrader (line 49, column 9 - line 58, column 24): " + [ v2.constructor.name ]);
              };
              return Screeps_Creep.setMemory(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.creep)("working")(false)();
          };
      };
      throw new Error("Failed pattern match at Role.Upgrader (line 32, column 3 - line 60, column 40): " + [ v.mem.working.constructor.name ]);
  };
  exports["runUpgrader"] = runUpgrader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.RoomPosition"] = $PS["Screeps.RoomPosition"] || {};
  var exports = $PS["Screeps.RoomPosition"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var Screeps_Types = $PS["Screeps.Types"];
  var unwrapContext = function (v) {
      if (v instanceof Screeps_Types.OfType) {
          return v.value0;
      };
      if (v instanceof Screeps_Types.OfObj) {
          return v.value0;
      };
      if (v instanceof Screeps_Types.OfPos) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Screeps.RoomPosition (line 44, column 1 - line 44, column 48): " + [ v.constructor.name ]);
  };
  var findClosestByRange = function (pos) {
      return function (ctx) {
          return Effect_Exception["try"](Data_Functor.map(Effect.functorEffect)(Screeps_FFI.toMaybe)(Screeps_FFI.runThisEffFn1("findClosestByRange")(pos)(unwrapContext(ctx))));
      };
  };
  exports["findClosestByRange"] = findClosestByRange;
})(PS);
(function($PS) {
  "use strict";
  $PS["Screeps.Defense"] = $PS["Screeps.Defense"] || {};
  var exports = $PS["Screeps.Defense"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_RoomPosition = $PS["Screeps.RoomPosition"];
  var Screeps_Tower = $PS["Screeps.Tower"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var runTower = function (tower) {
      var roomPos = Screeps_RoomObject.pos(tower);
      return function __do() {
          var v = Screeps_RoomPosition.findClosestByRange(roomPos)(new Screeps_Types.OfType(Screeps_Constants.find_hostile_creeps))();
          if (v instanceof Data_Either.Left) {
              return Data_Unit.unit;
          };
          if (v instanceof Data_Either.Right) {
              if (v.value0 instanceof Data_Maybe.Just) {
                  var v1 = Screeps_Tower.attack(tower)(v.value0.value0)();
                  return Data_Unit.unit;
              };
              if (v.value0 instanceof Data_Maybe.Nothing) {
                  return Data_Unit.unit;
              };
              throw new Error("Failed pattern match at Screeps.Defense (line 30, column 7 - line 35, column 20): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Screeps.Defense (line 27, column 3 - line 35, column 20): " + [ v.constructor.name ]);
      };
  };
  exports["runTower"] = runTower;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var CreepRoles = $PS["CreepRoles"];
  var CreepSpawning = $PS["CreepSpawning"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Role_Builder = $PS["Role.Builder"];
  var Role_Harvester = $PS["Role.Harvester"];
  var Role_Upgrader = $PS["Role.Upgrader"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Defense = $PS["Screeps.Defense"];
  var Screeps_Game = $PS["Screeps.Game"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Tower = $PS["Screeps.Tower"];
  var matchUnit = function (v) {
      if (v instanceof Data_Either.Right && v.value0 instanceof CreepRoles.Harvester) {
          return Role_Harvester.runHarvester(v.value0.value0);
      };
      if (v instanceof Data_Either.Right && v.value0 instanceof CreepRoles.Upgrader) {
          return Role_Upgrader.runUpgrader(v.value0.value0);
      };
      if (v instanceof Data_Either.Right && v.value0 instanceof CreepRoles.Builder) {
          return Role_Builder.runBuilder(v.value0.value0);
      };
      if (v instanceof Data_Either.Left) {
          return Effect_Console.log("One of the creeps has a memory I can't parse.\x0a" + v.value0);
      };
      throw new Error("Failed pattern match at Main (line 36, column 1 - line 36, column 68): " + [ v.constructor.name ]);
  };
  var runCreepRole = function (creep) {
      return Control_Bind.bind(Effect.bindEffect)(CreepRoles.classifyCreep(creep))(matchUnit);
  };
  var isTower = function (struct) {
      var v = Screeps_Tower.toTower(struct);
      if (v instanceof Data_Maybe.Nothing) {
          return false;
      };
      if (v instanceof Data_Maybe.Just) {
          return true;
      };
      throw new Error("Failed pattern match at Main (line 49, column 3 - line 51, column 19): " + [ v.constructor.name ]);
  };
  var loop = function __do() {
      var v = Screeps_Game.getGameGlobal();
      Data_Foldable.for_(Effect.applicativeEffect)(Foreign_Object.foldableObject)(Screeps_Game.spawns(v))(function (spawn) {
          var towers = Screeps_Room["find'"](Screeps_RoomObject.room(spawn))(Screeps_Constants.find_my_structures)(isTower);
          return function __do() {
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(towers)(function (n) {
                  return Screeps_Defense.runTower(n);
              })();
              return CreepSpawning.spawnCreepIfNeeded(spawn)();
          };
      })();
      return Data_Foldable.for_(Effect.applicativeEffect)(Foreign_Object.foldableObject)(Screeps_Game.creeps(v))(function (n) {
          return runCreepRole(n);
      })();
  };
  exports["loop"] = loop;
})(PS);
module.exports.loop = PS["Main"].loop;