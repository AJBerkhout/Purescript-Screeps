// Generated by purs bundle 0.13.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];               
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["applicativeST"] = applicativeST;
  exports["monadST"] = monadST;
})(PS);
(function(exports) {
  "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
  exports.fromObject = id;

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromJust"] = fromJust;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(caseJsonString);
  exports["caseJsonString"] = caseJsonString;
  exports["toString"] = toString;
  exports["fromString"] = $foreign.fromString;
  exports["fromObject"] = $foreign.fromObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["bindEither"] = bindEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Either = $PS["Data.Either"];
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.caseJsonString(new Data_Either.Left("Value is not a String"))(Data_Either.Right.create));   
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonString"] = decodeJsonString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        ++s;
      }
    }
    return s;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var filterWithKey = function (predicate) {
      return function (m) {
          var go = (function () {
              var step = function (acc) {
                  return function (k) {
                      return function (v) {
                          var $41 = predicate(k)(v);
                          if ($41) {
                              return Foreign_Object_ST.poke(k)(v)(acc);
                          };
                          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
                      };
                  };
              };
              return function __do() {
                  var v = Foreign_Object_ST["new"]();
                  return foldM(Control_Monad_ST_Internal.monadST)(step)(v)(m)();
              };
          })();
          return $foreign.runST(go);
      };
  };
  var filter = function (predicate) {
      return filterWithKey(Data_Function["const"](predicate));
  };
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["filter"] = filter;
  exports["foldableObject"] = foldableObject;
  exports["empty"] = $foreign.empty;
  exports["size"] = $foreign.size;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var GEncodeJson = function (gEncodeJson) {
      this.gEncodeJson = gEncodeJson;
  };
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };
  var gEncodeJsonNil = new GEncodeJson(function (v) {
      return function (v1) {
          return Foreign_Object.empty;
      };
  });
  var gEncodeJson = function (dict) {
      return dict.gEncodeJson;
  };                                                
  var encodeRecord = function (dictGEncodeJson) {
      return function (dictRowToList) {
          return new EncodeJson(function (rec) {
              return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Data_RowList.RLProxy.value));
          });
      };
  };                                                                                          
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var gEncodeJsonCons = function (dictEncodeJson) {
      return function (dictGEncodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return new GEncodeJson(function (row) {
                      return function (v) {
                          return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Data_RowList.RLProxy.value));
                      };
                  });
              };
          };
      };
  };
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeRecord"] = encodeRecord;
  exports["gEncodeJsonNil"] = gEncodeJsonNil;
  exports["gEncodeJsonCons"] = gEncodeJsonCons;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  exports["head"] = head;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["from"] = from;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Generic.Rep.Eq"] = $PS["Data.Generic.Rep.Eq"] || {};
  var exports = $PS["Data.Generic.Rep.Eq"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];                
  var GenericEq = function (genericEq$prime) {
      this["genericEq'"] = genericEq$prime;
  }; 
  var genericEqArgument = function (dictEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var genericEq$prime = function (dict) {
      return dict["genericEq'"];
  };
  var genericEqConstructor = function (dictGenericEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return genericEq$prime(dictGenericEq)(v)(v1);
          };
      });
  };
  var genericEq = function (dictGeneric) {
      return function (dictGenericEq) {
          return function (x) {
              return function (y) {
                  return genericEq$prime(dictGenericEq)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["genericEq"] = genericEq;
  exports["genericEqConstructor"] = genericEqConstructor;
  exports["genericEqArgument"] = genericEqArgument;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  var Data_Show = $PS["Data.Show"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var logShow = function (dictMonadEffect) {
      return function (dictShow) {
          var $23 = Effect_Class.liftEffect(dictMonadEffect);
          var $24 = Effect_Console.logShow(dictShow);
          return function ($25) {
              return $23($24($25));
          };
      };
  };
  exports["logShow"] = logShow;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";               
  exports.err_not_in_range = ERR_NOT_IN_RANGE;      
  exports.find_sources = FIND_SOURCES;       
  exports.find_my_structures = FIND_MY_STRUCTURES;
  exports.find_construction_sites = FIND_CONSTRUCTION_SITES;
  exports.find_my_spawns = FIND_MY_SPAWNS;              

  exports.part_move = MOVE;
  exports.part_work = WORK;
  exports.part_carry = CARRY;         

  exports.structure_spawn = STRUCTURE_SPAWN;
  exports.structure_extension = STRUCTURE_EXTENSION;

  exports.resource_energy = RESOURCE_ENERGY;
})(PS["Screeps.Constants"] = PS["Screeps.Constants"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Constants"] = $PS["Screeps.Constants"] || {};
  var exports = $PS["Screeps.Constants"];
  var $foreign = $PS["Screeps.Constants"];
  exports["err_not_in_range"] = $foreign.err_not_in_range;
  exports["find_sources"] = $foreign.find_sources;
  exports["find_my_structures"] = $foreign.find_my_structures;
  exports["find_construction_sites"] = $foreign.find_construction_sites;
  exports["find_my_spawns"] = $foreign.find_my_spawns;
  exports["part_move"] = $foreign.part_move;
  exports["part_work"] = $foreign.part_work;
  exports["part_carry"] = $foreign.part_carry;
  exports["structure_spawn"] = $foreign.structure_spawn;
  exports["structure_extension"] = $foreign.structure_extension;
  exports["resource_energy"] = $foreign.resource_energy;
})(PS);
(function(exports) {
  "use strict";

  // module Screeps.FFI

  exports.unsafeField = function(key){
    return function(obj){
      return obj[key];
    }
  }

  exports.unsafeGetFieldEff = function(key){
    return function(obj){
      return function(){
        return obj[key];
      }
    }
  }

  exports.unsafeSetFieldEff = function(key){
    return function(obj){
      return function(val){
        return function(){
          obj[key] = val;
        }
      }
    }
  }

  exports.runThisEffFn1 = function(key){
    return function(self){
      return function(a){
        return function(){
          return self[key](a);
        }
      }
    }
  }

  exports.runThisEffFn2 = function(key){
    return function(self){
      return function(a){
        return function(b){
          return function(){
            return self[key](a, b);
          }
        }
      }
    }
  }

  exports.runThisFn1 = function(key){
    return function(self){
      return function(a){
        return self[key](a);
      }
    }
  }

  exports.null = null;          

  exports.notNullOrUndefined = function(x){
      return x;
  }

  exports.toMaybeImpl = function(val, nothing, just){
      if(val === null || val === undefined){
          return nothing;
      } else {
          return just(val);
      }
  }
})(PS["Screeps.FFI"] = PS["Screeps.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.FFI"] = $PS["Screeps.FFI"] || {};
  var exports = $PS["Screeps.FFI"];
  var $foreign = $PS["Screeps.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                                                      
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNullOrUndefined);
  var toMaybe = function (n) {
      return $foreign.toMaybeImpl(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["unsafeField"] = $foreign.unsafeField;
  exports["unsafeGetFieldEff"] = $foreign.unsafeGetFieldEff;
  exports["unsafeSetFieldEff"] = $foreign.unsafeSetFieldEff;
  exports["runThisEffFn1"] = $foreign.runThisEffFn1;
  exports["runThisEffFn2"] = $foreign.runThisEffFn2;
  exports["runThisFn1"] = $foreign.runThisFn1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Memory"] = $PS["Screeps.Memory"] || {};
  var exports = $PS["Screeps.Memory"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                  
  var toJson = function (dictEncodeJson) {
      var $7 = Data_Maybe.fromJust();
      var $8 = Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson);
      return function ($9) {
          return $7(Data_Argonaut_Core.toString($8($9)));
      };
  };
  var fromJson = function (dictDecodeJson) {
      return function (jsonStr) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(jsonStr))(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
      };
  };
  exports["fromJson"] = fromJson;
  exports["toJson"] = toJson;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Types"] = $PS["Screeps.Types"] || {};
  var exports = $PS["Screeps.Types"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = $PS["Data.Generic.Rep.Eq"];
  var Data_Show = $PS["Data.Show"];
  var TargetPt = (function () {
      function TargetPt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TargetPt.create = function (value0) {
          return function (value1) {
              return new TargetPt(value0, value1);
          };
      };
      return TargetPt;
  })();
  var TargetObj = (function () {
      function TargetObj(value0) {
          this.value0 = value0;
      };
      TargetObj.create = function (value0) {
          return new TargetObj(value0);
      };
      return TargetObj;
  })();
  var TargetPos = (function () {
      function TargetPos(value0) {
          this.value0 = value0;
      };
      TargetPos.create = function (value0) {
          return new TargetPos(value0);
      };
      return TargetPos;
  })();
  var showReturnCode = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showInt)(v);
  });
  var showResourceType = new Data_Show.Show(function (v) {
      return v;
  });
  var genericStructureType = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });   
  var genericReturnCode = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });                                                                                                                                                                              
  var eqStructureType = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericStructureType)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqArgument(Data_Eq.eqString))));
  var eqReturnCode = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericReturnCode)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqArgument(Data_Eq.eqInt))));
  exports["TargetPt"] = TargetPt;
  exports["TargetObj"] = TargetObj;
  exports["TargetPos"] = TargetPos;
  exports["eqReturnCode"] = eqReturnCode;
  exports["showReturnCode"] = showReturnCode;
  exports["showResourceType"] = showResourceType;
  exports["eqStructureType"] = eqStructureType;
})(PS);
(function($PS) {
  
  // | Corresponds to the Screeps API [Creep](http://support.screeps.com/hc/en-us/articles/203013212-Creep)
  "use strict";
  $PS["Screeps.Creep"] = $PS["Screeps.Creep"] || {};
  var exports = $PS["Screeps.Creep"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var Screeps_Memory = $PS["Screeps.Memory"];
  var Screeps_Types = $PS["Screeps.Types"];            
  var upgradeController = Screeps_FFI.runThisEffFn1("upgradeController");
  var transferToStructure = Screeps_FFI.runThisEffFn2("transfer");
  var setMemory = function (dictEncodeJson) {
      return function (creep) {
          return function (key) {
              return function (val) {
                  var creepMemory = Screeps_FFI.unsafeField("memory")(creep);
                  return Screeps_FFI.unsafeSetFieldEff(key)(creepMemory)(Screeps_Memory.toJson(dictEncodeJson)(val));
              };
          };
      };
  };
  var say = function (creep) {
      return function (msg) {
          return Screeps_FFI.runThisEffFn1("say")(creep)(msg);
      };
  };                                                                       
  var name = Screeps_FFI.unsafeField("name");
  var moveTo = function (creep) {
      return function (v) {
          if (v instanceof Screeps_Types.TargetPt) {
              return Screeps_FFI.runThisEffFn2("moveTo")(creep)(v.value0)(v.value1);
          };
          if (v instanceof Screeps_Types.TargetPos) {
              return Screeps_FFI.runThisEffFn1("moveTo")(creep)(v.value0);
          };
          if (v instanceof Screeps_Types.TargetObj) {
              return Screeps_FFI.runThisEffFn1("moveTo")(creep)(v.value0);
          };
          throw new Error("Failed pattern match at Screeps.Creep (line 143, column 1 - line 143, column 69): " + [ creep.constructor.name, v.constructor.name ]);
      };
  };                                           
  var harvestSource = Screeps_FFI.runThisEffFn1("harvest"); 
  var getMemory = function (dictDecodeJson) {
      return function (creep) {
          return function (key) {
              var creepMemory = Screeps_FFI.unsafeField("memory")(creep);
              return Data_Functor.map(Effect.functorEffect)(Screeps_Memory.fromJson(dictDecodeJson))(Screeps_FFI.unsafeGetFieldEff(key)(creepMemory));
          };
      };
  };                                                                 
  var carryCapacity = Screeps_FFI.unsafeField("carryCapacity");
  var carry = Screeps_FFI.unsafeField("carry");              
  var build = Screeps_FFI.runThisEffFn1("build");                      
  var amtCarrying = function (creep) {
      return function (res) {
          return Screeps_FFI.unsafeField(Data_Show.show(Screeps_Types.showResourceType)(res))(carry(creep));
      };
  };
  exports["amtCarrying"] = amtCarrying;
  exports["carryCapacity"] = carryCapacity;
  exports["build"] = build;
  exports["harvestSource"] = harvestSource;
  exports["getMemory"] = getMemory;
  exports["setMemory"] = setMemory;
  exports["moveTo"] = moveTo;
  exports["say"] = say;
  exports["transferToStructure"] = transferToStructure;
  exports["upgradeController"] = upgradeController;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Room"] = $PS["Screeps.Room"] || {};
  var exports = $PS["Screeps.Room"];
  var Screeps_FFI = $PS["Screeps.FFI"];
  var find = Screeps_FFI.runThisFn1("find");
  var controller = function (room) {
      return Screeps_FFI.toMaybe(Screeps_FFI.unsafeField("controller")(room));
  };
  exports["controller"] = controller;
  exports["find"] = find;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.RoomObject"] = $PS["Screeps.RoomObject"] || {};
  var exports = $PS["Screeps.RoomObject"];
  var Screeps_FFI = $PS["Screeps.FFI"];                
  var room = Screeps_FFI.unsafeField("room");
  exports["room"] = room;
})(PS);
(function($PS) {
  "use strict";
  $PS["Role.Builder"] = $PS["Role.Builder"] || {};
  var exports = $PS["Role.Builder"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var ignore = function (v) {
      return Data_Unit.unit;
  };
  var ignoreM = function (dictMonad) {
      return function (m) {
          return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(m)(ignore);
      };
  };
  var runBuilder = function (creep) {
      return function __do() {
          var v = Screeps_Creep.getMemory(Data_Argonaut_Decode_Class.decodeJsonString)(creep)("working")();
          if (v instanceof Data_Either.Left) {
              return Effect_Console.log(v.value0)();
          };
          if (v instanceof Data_Either.Right) {
              if (v.value0 === "true") {
                  var v1 = Screeps_Creep.amtCarrying(creep)("energy") === 0;
                  if (v1) {
                      var v2 = Screeps_Creep.say(creep)("Harvesting")();
                      return Screeps_Creep.setMemory(Data_Argonaut_Encode_Class.encodeJsonJString)(creep)("working")("\"false\"")();
                  };
                  if (!v1) {
                      var v2 = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(creep))(Screeps_Constants.find_construction_sites));
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Data_Unit.unit;
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          var v3 = Screeps_Creep.build(creep)(v2.value0)();
                          var $19 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v3)(Screeps_Constants.err_not_in_range);
                          if ($19) {
                              return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(creep)(new Screeps_Types.TargetObj(v2.value0)))();
                          };
                          return Data_Unit.unit;
                      };
                      throw new Error("Failed pattern match at Role.Builder (line 44, column 15 - line 51, column 33): " + [ v2.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Role.Builder (line 38, column 11 - line 51, column 33): " + [ v1.constructor.name ]);
              };
              if (v.value0 === "false") {
                  var v1 = Screeps_Creep.amtCarrying(creep)("energy") === Screeps_Creep.carryCapacity(creep);
                  if (v1) {
                      var v2 = Screeps_Creep.say(creep)("working")();
                      return Screeps_Creep.setMemory(Data_Argonaut_Encode_Class.encodeJsonJString)(creep)("working")("\"true\"")();
                  };
                  if (!v1) {
                      var v2 = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(creep))(Screeps_Constants.find_sources));
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Data_Unit.unit;
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          var v3 = Screeps_Creep.harvestSource(creep)(v2.value0)();
                          var $25 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v3)(Screeps_Constants.err_not_in_range);
                          if ($25) {
                              return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(creep)(new Screeps_Types.TargetObj(v2.value0)))();
                          };
                          return Data_Unit.unit;
                      };
                      throw new Error("Failed pattern match at Role.Builder (line 58, column 15 - line 65, column 33): " + [ v2.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Role.Builder (line 53, column 11 - line 65, column 33): " + [ v1.constructor.name ]);
              };
              return Data_Unit.unit;
          };
          throw new Error("Failed pattern match at Role.Builder (line 31, column 3 - line 67, column 20): " + [ v.constructor.name ]);
      };
  };
  exports["runBuilder"] = runBuilder;
})(PS);
(function(exports) {
  "use strict";

  exports.getGameGlobal = function(){ return Game; }
})(PS["Screeps.Game"] = PS["Screeps.Game"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Game"] = $PS["Screeps.Game"] || {};
  var exports = $PS["Screeps.Game"];
  var $foreign = $PS["Screeps.Game"];
  var Screeps_FFI = $PS["Screeps.FFI"];                  
  var spawns = Screeps_FFI.unsafeField("spawns");
  var creeps = Screeps_FFI.unsafeField("creeps");
  exports["creeps"] = creeps;
  exports["spawns"] = spawns;
  exports["getGameGlobal"] = $foreign.getGameGlobal;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Screeps.Structure"] = $PS["Screeps.Structure"] || {};
  var exports = $PS["Screeps.Structure"];
  var Screeps_FFI = $PS["Screeps.FFI"];                    
  var structureType = Screeps_FFI.unsafeField("structureType");
  exports["structureType"] = structureType;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Role.Harvester"] = $PS["Role.Harvester"] || {};
  var exports = $PS["Role.Harvester"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Game = $PS["Screeps.Game"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Structure = $PS["Screeps.Structure"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var ignore = function (v) {
      return Data_Unit.unit;
  };
  var ignoreM = function (dictMonad) {
      return function (m) {
          return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(m)(ignore);
      };
  };
  var desiredTarget = function (struct) {
      return Data_Eq.eq(Screeps_Types.eqStructureType)(Screeps_Structure.structureType(struct))(Screeps_Constants.structure_spawn) || Data_Eq.eq(Screeps_Types.eqStructureType)(Screeps_Structure.structureType(struct))(Screeps_Constants.structure_extension);
  };
  var runHarvester = function (creep) {
      var $7 = Screeps_Creep.amtCarrying(creep)("energy") < Screeps_Creep.carryCapacity(creep);
      if ($7) {
          var v = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(creep))(Screeps_Constants.find_sources));
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return function __do() {
                  var v1 = Screeps_Creep.harvestSource(creep)(v.value0)();
                  var $10 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v1)(Screeps_Constants.err_not_in_range);
                  if ($10) {
                      return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(creep)(new Screeps_Types.TargetObj(v.value0)))();
                  };
                  return Data_Unit.unit;
              };
          };
          throw new Error("Failed pattern match at Role.Harvester (line 33, column 5 - line 39, column 23): " + [ v.constructor.name ]);
      };
      return function __do() {
          var v = Screeps_Game.getGameGlobal();
          var v1 = Data_Array.head(Data_Array.filter(desiredTarget)(Screeps_Room.find(Screeps_RoomObject.room(creep))(Screeps_Constants.find_my_structures)));
          if (v1 instanceof Data_Maybe.Nothing) {
              return Data_Unit.unit;
          };
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = Screeps_Creep.transferToStructure(creep)(v1.value0)(Screeps_Constants.resource_energy)();
              var $15 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v2)(Screeps_Constants.err_not_in_range);
              if ($15) {
                  return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(creep)(new Screeps_Types.TargetObj(v1.value0)))();
              };
              return Data_Unit.unit;
          };
          throw new Error("Failed pattern match at Role.Harvester (line 43, column 5 - line 49, column 23): " + [ v1.constructor.name ]);
      };
  };
  exports["runHarvester"] = runHarvester;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Role.Upgrader"] = $PS["Role.Upgrader"] || {};
  var exports = $PS["Role.Upgrader"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Game = $PS["Screeps.Game"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var ignore = function (v) {
      return Data_Unit.unit;
  };
  var ignoreM = function (dictMonad) {
      return function (m) {
          return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(m)(ignore);
      };
  };
  var runUpgrader = function (creep) {
      var $7 = Screeps_Creep.amtCarrying(creep)("energy") < Screeps_Creep.carryCapacity(creep);
      if ($7) {
          var v = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(creep))(Screeps_Constants.find_sources));
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return function __do() {
                  var v1 = Screeps_Creep.harvestSource(creep)(v.value0)();
                  var $10 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v1)(Screeps_Constants.err_not_in_range);
                  if ($10) {
                      return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(creep)(new Screeps_Types.TargetObj(v.value0)))();
                  };
                  return Data_Unit.unit;
              };
          };
          throw new Error("Failed pattern match at Role.Upgrader (line 27, column 8 - line 33, column 21): " + [ v.constructor.name ]);
      };
      return function __do() {
          var v = Screeps_Game.getGameGlobal();
          var v1 = Screeps_Room.controller(Screeps_RoomObject.room(creep));
          if (v1 instanceof Data_Maybe.Nothing) {
              return Data_Unit.unit;
          };
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = Screeps_Creep.upgradeController(creep)(v1.value0)();
              var $15 = Data_Eq.eq(Screeps_Types.eqReturnCode)(v2)(Screeps_Constants.err_not_in_range);
              if ($15) {
                  return ignoreM(Effect.monadEffect)(Screeps_Creep.moveTo(creep)(new Screeps_Types.TargetObj(v1.value0)))();
              };
              return Data_Unit.unit;
          };
          throw new Error("Failed pattern match at Role.Upgrader (line 37, column 5 - line 43, column 23): " + [ v1.constructor.name ]);
      };
  };
  exports["runUpgrader"] = runUpgrader;
})(PS);
(function(exports) {
  "use strict";

  exports.createCreepPrimeImpl = function(structure){
      return function(parts){
          return function(name){
              return function(memory){
                  return function(left){
                      return function(right){
                          return function(){
                              var result = structure.createCreep(parts, name, memory);
                              if(typeof result === "string"){
                                  return right(result);
                              } else {
                                  return left(result);
                              }
                          }
                      }
                  }
              }
          }
      }
  }
})(PS["Screeps.Spawn"] = PS["Screeps.Spawn"] || {});
(function($PS) {
  
  // | Corresponds to the Screeps API [StructureSpawn](http://support.screeps.com/hc/en-us/articles/205990342-StructureSpawn)
  "use strict";
  $PS["Screeps.Spawn"] = $PS["Screeps.Spawn"] || {};
  var exports = $PS["Screeps.Spawn"];
  var $foreign = $PS["Screeps.Spawn"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Either = $PS["Data.Either"];
  var Screeps_FFI = $PS["Screeps.FFI"];          
  var createCreep$prime = function (dictEncodeJson) {
      return function (spawn) {
          return function (parts) {
              return function (name$prime) {
                  return function (mem) {
                      return $foreign.createCreepPrimeImpl(spawn)(parts)(Screeps_FFI.toNullable(name$prime))(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(mem))(Data_Either.Left.create)(Data_Either.Right.create);
                  };
              };
          };
      };
  };
  var canCreateCreep = function (spawn) {
      return function (parts) {
          return Screeps_FFI.runThisFn1("canCreateCreep")(spawn)(parts);
      };
  };
  exports["canCreateCreep"] = canCreateCreep;
  exports["createCreep'"] = createCreep$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Role_Builder = $PS["Role.Builder"];
  var Role_Harvester = $PS["Role.Harvester"];
  var Role_Upgrader = $PS["Role.Upgrader"];
  var Screeps_Constants = $PS["Screeps.Constants"];
  var Screeps_Creep = $PS["Screeps.Creep"];
  var Screeps_Game = $PS["Screeps.Game"];
  var Screeps_Room = $PS["Screeps.Room"];
  var Screeps_RoomObject = $PS["Screeps.RoomObject"];
  var Screeps_Spawn = $PS["Screeps.Spawn"];
  var Screeps_Types = $PS["Screeps.Types"];                
  var matchUnit = function (creep) {
      return function (role) {
          if (role === "Harvester") {
              return Role_Harvester.runHarvester(creep);
          };
          if (role === "Upgrader") {
              return Role_Upgrader.runUpgrader(creep);
          };
          if (role === "Builder") {
              return Role_Builder.runBuilder(creep);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var runCreepRole = function (creep) {
      return function __do() {
          var v = Screeps_Creep.getMemory(Data_Argonaut_Decode_Class.decodeJsonString)(creep)("role")();
          if (v instanceof Data_Either.Right) {
              return matchUnit(creep)(v.value0)();
          };
          if (v instanceof Data_Either.Left) {
              return Effect_Console.log(v.value0)();
          };
          throw new Error("Failed pattern match at Main (line 50, column 5 - line 54, column 14): " + [ v.constructor.name ]);
      };
  };
  var creepToRole = function (creep) {
      return function __do() {
          var v = Screeps_Creep.getMemory(Data_Argonaut_Decode_Class.decodeJsonString)(creep)("role")();
          if (v instanceof Data_Either.Left) {
              return "undefined";
          };
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Main (line 59, column 3 - line 63, column 16): " + [ v.constructor.name ]);
      };
  };
  var creepIsRole = function (creep) {
      return function (role) {
          return function __do() {
              var v = creepToRole(creep)();
              return role === v;
          };
      };
  };
  var spawnNewCreeps = function (creep) {
      return function __do() {
          var v = Screeps_Game.getGameGlobal();
          var v1 = Foreign_Object.filter(function (n) {
              return Effect_Unsafe.unsafePerformEffect(creepIsRole(n)("Harvester"));
          })(Screeps_Game.creeps(v));
          var v2 = Foreign_Object.filter(function (n) {
              return Effect_Unsafe.unsafePerformEffect(creepIsRole(n)("Upgrader"));
          })(Screeps_Game.creeps(v));
          var v3 = Foreign_Object.filter(function (n) {
              return Effect_Unsafe.unsafePerformEffect(creepIsRole(n)("Builder"));
          })(Screeps_Game.creeps(v));
          var v4 = Data_Array.head(Screeps_Room.find(Screeps_RoomObject.room(creep))(Screeps_Constants.find_my_spawns));
          if (v4 instanceof Data_Maybe.Nothing) {
              return Data_Unit.unit;
          };
          if (v4 instanceof Data_Maybe.Just) {
              var $29 = Foreign_Object.size(v1) < 5;
              if ($29) {
                  var x = {
                      role: "\"Harvester\""
                  };
                  var v5 = Screeps_Spawn["createCreep'"](Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                      return "role";
                  }))())())(v4.value0)([ Screeps_Constants.part_move, Screeps_Constants.part_work, Screeps_Constants.part_work, Screeps_Constants.part_carry ])(Data_Maybe.Nothing.value)(x)();
                  if (v5 instanceof Data_Either.Right) {
                      return Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Show.showString)(v5.value0)();
                  };
                  if (v5 instanceof Data_Either.Left) {
                      return Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Screeps_Types.showReturnCode)(v5.value0)();
                  };
                  throw new Error("Failed pattern match at Main (line 89, column 13 - line 91, column 40): " + [ v5.constructor.name ]);
              };
              var $34 = Foreign_Object.size(v3) < 2;
              if ($34) {
                  var x = {
                      role: "\"Builder\"",
                      working: "\"true\""
                  };
                  var v5 = Screeps_Spawn["createCreep'"](Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                      return "working";
                  }))())(new Data_Symbol.IsSymbol(function () {
                      return "role";
                  }))())())(v4.value0)([ Screeps_Constants.part_move, Screeps_Constants.part_move, Screeps_Constants.part_work, Screeps_Constants.part_carry ])(Data_Maybe.Nothing.value)(x)();
                  if (v5 instanceof Data_Either.Right) {
                      return Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Show.showString)(v5.value0)();
                  };
                  if (v5 instanceof Data_Either.Left) {
                      return Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Screeps_Types.showReturnCode)(v5.value0)();
                  };
                  throw new Error("Failed pattern match at Main (line 96, column 15 - line 98, column 42): " + [ v5.constructor.name ]);
              };
              var x = {
                  role: "\"Upgrader\"",
                  working: "\"true\""
              };
              var v5 = Screeps_Spawn["createCreep'"](Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                  return "working";
              }))())(new Data_Symbol.IsSymbol(function () {
                  return "role";
              }))())())(v4.value0)([ Screeps_Constants.part_move, Screeps_Constants.part_work, Screeps_Constants.part_work, Screeps_Constants.part_carry ])(Data_Maybe.Nothing.value)(x)();
              if (v5 instanceof Data_Either.Right) {
                  return Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Show.showString)(v5.value0)();
              };
              if (v5 instanceof Data_Either.Left) {
                  return Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Screeps_Types.showReturnCode)(v5.value0)();
              };
              throw new Error("Failed pattern match at Main (line 102, column 15 - line 104, column 42): " + [ v5.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 83, column 7 - line 104, column 42): " + [ v4.constructor.name ]);
      };
  };
  var loop = function __do() {
      var v = Screeps_Game.getGameGlobal();
      (function () {
          var $45 = Foreign_Object.isEmpty(Screeps_Game.creeps(v));
          if ($45) {
              return Data_Foldable.for_(Effect.applicativeEffect)(Foreign_Object.foldableObject)(Screeps_Game.spawns(v))(function (spawn) {
                  var x = {
                      role: "\"Harvester\""
                  };
                  return Screeps_Spawn["createCreep'"](Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                      return "role";
                  }))())())(spawn)([ Screeps_Constants.part_move, Screeps_Constants.part_move, Screeps_Constants.part_work, Screeps_Constants.part_carry ])(Data_Maybe.Nothing.value)(x);
              })();
          };
          return Data_Unit.unit;
      })();
      return Data_Foldable.for_(Effect.applicativeEffect)(Foreign_Object.foldableObject)(Screeps_Game.creeps(v))(function (n) {
          return function __do() {
              Data_Foldable.for_(Effect.applicativeEffect)(Foreign_Object.foldableObject)(Screeps_Game.spawns(v))(function (spawn) {
                  var $46 = Data_Eq.eq(Screeps_Types.eqReturnCode)(Screeps_Spawn.canCreateCreep(spawn)([ Screeps_Constants.part_move, Screeps_Constants.part_work, Screeps_Constants.part_work, Screeps_Constants.part_carry ]))(0);
                  if ($46) {
                      return spawnNewCreeps(n);
                  };
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              })();
              return runCreepRole(n)();
          };
      })();
  };
  exports["loop"] = loop;
})(PS);
PS["Main"].main();